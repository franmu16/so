#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *indice(void *arg){
    int* n = (int*) arg;
    printf("Thread %d: %d\n",*n, *n);
}
int main(int argc, char* argv[]){
    int i;
    if(argc < 2){
        printf("No number");
        return 0;
    }
    int N = atoi(argv[1]);
    int* v = malloc(N*sizeof(int));
    for(i=0; i<N; i++)
        v[i]=i;
    pthread_t thread_id[N];
    for(i=0; i<N; i++){
        if(pthread_create(&thread_id[i], NULL, indice , v+i)!=0){
            printf("Errore in creazione del %do thread", i+1);
            return 0;
        }
    }
    for(i=0; i<N; i++)
        pthread_join(thread_id[i], NULL);
    free(v);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/stat.h>
#define SIZE 10

typedef struct {
    char str[SIZE];
}shared_data;

int main(int argc, char* argv[]){
    int len = strlen(argv[1]);
    int segment_id = shmget(IPC_PRIVATE, sizeof(shared_data), S_IRUSR | S_IWUSR);
    if(segment_id==-1){
        printf("Errore creazione mem condivisa");
        shmctl(segment_id, IPC_RMID, NULL);
        return 1;
    }
    char* string;
    string=argv[1];
    pid_t pid = fork();
    if(pid<0){
        printf("Errore fork");
        shmctl(segment_id, IPC_RMID, NULL);
        return 1;
    }
    if(pid==0){
        shared_data* v = (shared_data*)shmat(segment_id, NULL, 0);
        strncpy(v->str,argv[1],SIZE);
        
        pid_t pid2=fork();
        if(pid2<0){
            printf("Errore fork");
            shmctl(segment_id, IPC_RMID, NULL);
            return 1;
        }
        if(pid2==0){
            int i; 
            for(i=0; i<len/2; i++){
                char tmp = v->str[i];
                v->str[i]=v->str[len-i-1];
                v->str[len-i-1]=tmp;
            } 
            shmdt(v);
        }
        else if(pid2>0){
            wait(NULL);
            shared_data*rev=(shared_data*)shmat(segment_id, NULL, 0);
            printf("Stringa originale: %s\n",string);
            printf("Stringa invertita: %s\n",rev->str);
            if(strcmp(rev->str,string)==0)
                printf("Stringa palindroma");
            else
                printf("Stringa non palindroma");
            shmdt(rev);
        }
        
    }
    if(pid>0){
        wait(NULL);
        //shared_data* vet = (shared_data*)shmat(segment_id, NULL, 0);
        //printf("%s",vet);    //stampa dell'es.1
        //shmdt(vet);
        shmctl(segment_id, IPC_RMID, NULL);
    }
    return 0;
}

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int main(int argc, char* argv[]){
pid_t pid;
int i=1;
char* s=argv[i];
while(s!=NULL){
  pid= fork();
  void srand(pid);
  if (pid == 0) { /* processo figlio */
    sleep(rand() % 11);
    printf("PID: %d,  Messaggio: %s\n", pid, argv[i]);
  }
  else if (pid > 0) { /* processo padre */
    wait(NULL);
    return(0);
  }
  i++;
  s=argv[i];
}
return 0;
}
#!/bin/bash
if(($#!=2)); then
	echo "Numero argomenti non valido"
	exit 1 
fi
if [[ -d $1 ]] ; then
	if [[ $2 == "up" ]]; then
		find "$1" -type f -exec cat {} ';' > out.txt
		sort -i out.txt | wc -l
		
	elif [[ $2 == "down" ]]; then
		find "$1" -type f -exec cat {} ';' > out.txt
		sort -i out.txt | wc -l
		
	else
		echo 'Non si è specificato se up o down'
	fi
else
	echo 'Directory non valida'
fi


#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main()
{
pid_t pid1,pid2;
pid1 = fork();
if (pid1 == 0) { /* processo figlio */
printf("PID fork figlio1: %d  PID proprio: %d\n",pid1,getpid());
}
else if (pid1 > 0) { /* processo padre */
wait(NULL);
printf("PID fork padre1: %d  PID proprio: %d\n",pid1,getpid());
exit(0);
}
pid2= fork();
if (pid2 == 0) { /* processo figlio */
printf("PID fork figlio2: %d  PID proprio: %d\n",pid2,getpid());
}
else if (pid2 > 0) { /* processo padre */
wait(NULL);
printf("PID fork padre2: %d  PID proprio: %d\n",pid2,getpid());
exit(0);
}
return 0;
}
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
int value = 5;
int main()
{
pid_t pid;
pid = fork();
if (pid == 0) { /* processo figlio */
value= value + 15;
printf("VALUE= %d\n",value);
return 0;
}
else if (pid > 0) { /* processo padre */
wait(NULL);
printf("PARENT: value = %d",value); /* LINEA A */
return 0;
}
}


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <math.h>
#include <time.h>
#define NTHREADS 4

typedef struct{
    int* v;
    int s;
}TS;
int fibonacci (int n){
    if(n==0)
        return 0;
    if(n==1)
        return 1;
    else
        return fibonacci(n-1)+fibonacci(n-2);
}
void* fib (void* arg){
    TS* t = (TS*) arg;
    int i;
    for(i=0; i<t->s; i++){
        t->v[i] = fibonacci(t->v[i]);
    }
}
int main(int argc, char* argv[]){
    int i=0, n=1,tmp,j;
    TS s[NTHREADS];
    int flag=0;
    pthread_t tid[NTHREADS];
    int* v = (int*)malloc(10*sizeof(int));
    printf("Inserire numero (digitare numero negativo per terminare la lettura): ");
    scanf("%d",&tmp);
    while(tmp>=0){
        v[i]=tmp;
        i++;
        if(i+1>n/2){
            n=n*2;
            v = (int*)realloc(v,n*sizeof(int));
        }
        printf("Inserire numero (digitare numero negativo per terminare la lettura): ");
        scanf("%d",&tmp);
    }
    int size = (i+1)/NTHREADS;   //length vettore da passare al thread
    if(i!=size*NTHREADS)
       flag=1;
    for(j=0; j<NTHREADS; j++){
        if(flag==0){
            s[j].v=v+(j*size);
            s[j].s=size;
            if(pthread_create(&(tid[j]), NULL, fib, s+j)!=0){
                printf("Errore in creazione del thread");
                return 2;
            }
        }
        else{
            s[j].v=v+(j*size);
            if(j+1<NTHREADS)
                s[j].s=size;
            else
                s[j].s=(i*sizeof(int)-j*sizeof(int))/sizeof(int);
            if(pthread_create(&(tid[j]), NULL, fib, &s[j])!=0){
                printf("Errore in creazione del thread");
                return 2;
            }
        }
    }
    for(j=0; j<NTHREADS; j++){
        pthread_join(tid[j], NULL);
        int* tmp = s[j].v;
        for(i=0; i<s[j].s; i++)
            printf("%d ", tmp[i]);
    }
    return 0;
}

#!/bin/bash
if(($#!=1)); then
	echo "Numero argomenti errato"
	exit 1
fi
if [[ ! -e $1 ]]; then
	echo "Il file $1 non esiste!"
elif [[ -e $1 ]] && [[ -f $1 ]]; then
	echo "Il file $1 esiste!"
	if [[ -x "$1" ]]; then
		echo "Hai i permessi di esecuzione"
	else
		echo "Non hai i permessi di esecuzione"
	fi
fi
#!/bin/bash
if(($#!=2)); then
	echo "Numero argomenti non valido"
	exit 1 
fi
if [[ -d $1 ]] ; then
	if [[ $2 == "up" ]]; then
		find "$1" -type f -exec wc -l {} ';' | sort -n
		
	elif [[ $2 == "down" ]]; then
		find "$1" -type f -exec wc -l {} ';' | sort -nr
	else
		echo 'Non si è specificato se up o down'
	fi
else
	echo 'Directory non valida'
fi


#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#define size 3

void Calcola_radici(int*v, float*r1, float*r2){
    int det = (v[1])*(v[1]) - 4*v[0]*v[2];
    if (det >= 0) {
        *r1 = (-v[1] + sqrt(det)) / (2.0 * v[0]);
        *r2 = (-v[1] - sqrt(det)) / (2.0 * v[0]);
    } 
    else{
        // Gestione delle radici complesse o immaginarie
        printf("Le radici sono complesse o immaginarie.\n");
    }
}


int main(){
    int fd[2];
    int v[size];
    int ret = pipe(fd);
    if(ret<0){
        printf("Errore pipe");
        return 1;
    }
    printf("Inserire valori a,b,c: ");
    scanf("%d %d %d", v,v+1,v+2);
    int sent = write(fd[1], v, sizeof(v));
    if(sent<sizeof(v))
        printf("Errore in invio");
    pid_t pid = fork();
    if(pid<0){
        printf("Errore fork");
        return 1;
    }
    if(pid==0){
        close(fd[1]);
        float r1,r2;
        int vet[size];
        int rcv = read(fd[0], vet, sizeof(vet));
        if(rcv<sizeof(v))
            printf("Errore in ricezione");
        Calcola_radici(vet,&r1,&r2);
        printf("1a radice: %f\n2a radice: %f\n", r1,r2);
        close(fd[0]);
    }
    if(pid>0){
        wait(NULL);
        printf("Terminazione con successo del processo padre");
        close(fd);
    }
    return 0;
}

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
int genera(int num){
    int i=2, flag=0;
    do{
        if(num%i==0)
            flag=1;
        i++;
        if(flag==1)
            return 1;
    }while(i<num);
    return flag;
}
int main(int argc, char *argv[]){
    int i, fd[2];
    int r = pipe(fd);
    if(r!=0){
        printf("Errore della pipe");
        return 1;
    }
    pid_t pid = fork();
    if(pid<0){
        printf("Errore fork");
        return 1;
    }
    if(pid==0){
        close(fd[0]);
        int k=0,result;
        int sent;
        int num = atoi(argv[1]);
        do{
            num=num+1;
            result=genera(num);
            if(result==0){
                sent=write(fd[1],&num, sizeof(num));
                if(sent<sizeof(num))
                    printf("Errore in invio");
                k++;
            }
        }while(k<2);
        close(fd[1]);
    }
    if(pid>0){
        close(fd[1]);
        int i=0,num;
        while(i<2){
            int rcv = read(fd[0], &num, sizeof(int));
            printf("%do numero primo: %d\n",i+1, num);
            if(rcv<sizeof(int))
                printf("Errore in lettura");
            i++;
        }
        close(fd[0]);
    }

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <pthread.h>
typedef struct{
  float *v;
  int n;
}data;
void *radice(void *arg){
  data* s = (data*) arg;
  for(int i=0; i<s->n; i++){
    s->v[i] = sqrt(s->v[i]);
  }
}
int main(int argc, char *argv[]) {
  data str1,str2;
  int i;
  if(argc!= 2){
    printf("Non element");
    return 0;
  }
  int n = atoi(argv[1]);
  float v[n];
  str1.n = n/2;
  str1.v = v;
 for(i=0; i<n; i++){
  v[i] = (float) i+1;
 }
 pthread_t th1,th2;
 pthread_create(&th1, NULL, radice, &str1);
 if(th1<0){
    printf("Errore thread");
    return 0;
  }
  str2.n = n-n/2;
  str2.v = v+(n/2);
 pthread_create(&th2, NULL, radice, &str2);
 if(th2<0){
    printf("Errore thread");
    return 0;
  }
 pthread_join(th1, NULL);
 pthread_join(th2, NULL);
 for(i=0; i<n; i++){
  printf("%f  ", v[i]);
 }
 return 0;
}
/**************************************************************
Il candidato completi il programma fornito, implementando
il main. Il programma ottiene un numero intero N dai parametri
della linea di comando, e crea un processo figlio;
il processo figlio deve calcolare il quadrato, il cubo, e la
quarta potenza di N e deve passare questi tre valori
al processo padre; il processo padre deve attendere la terminazione del figlio
e poi stampare i tre valori ricevuti.
La comunicazione tra processo padre e processo
figlio deve avvenire tramite l'uso di pipe.
Il candidato può definire, se lo ritiene utile, funzioni ausiliarie.
*************************************************************/

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    int fd[2];
    int retval = pipe(fd);
    if(retval!=0)
        perror("Errore della pipe");
    pid_t pid = fork();
    if(pid<0){
        printf("Errore fork");
        return 1;
    }
    if(pid==0){
        close(fd[0]);
        int num = atoi(argv[1]);
        int v[3];
        v[0]=num*num;
        v[1]=v[0]*num;
        v[2]=v[0]*v[0];
        int sent = write(fd[1], v, sizeof(v));
        if(sent<sizeof(v))
            printf("Errore in invio");
        close(fd[1]);
        return 0;
    }
    if(pid>0){
        close(fd[1]);
        int vet[3];
        int received = read(fd[0], vet, 3*sizeof(int));
        if(received<3*sizeof(int))
            printf("Errore in lettura");
        for(int i=0; i<3; i++)
            printf("%d  ", vet[i]);
        close(fd[0]);
    }
}
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

typedef struct{
    int* v;
    int n;
    float res;
}TS;
void* massimo (void* arg){
    TS* vet = (TS*) arg;
    int max = vet->v[0];
    for(int i=1; i<vet->n; i++){
        if(max<vet->v[i])
            max=vet->v[i];
    }
    vet->res=max;
}
void* minimo (void* arg){
    TS* vet = (TS*) arg;
    int min = vet->v[0];
    for(int i=1; i<vet->n; i++){
        if(min>vet->v[i])
            min=vet->v[i];
    }
    vet->res=min;
}
void* media (void* arg){
    TS* vet = (TS*) arg;
    int i,sum=0;
    for(i=0; i<vet->n; i++){
        sum = sum + vet->v[i];
    }
    vet->res = sum/vet->n;
}
int main(){
    int n=1,i=0;
    int tmp;
    TS s1,s2,s3;
    //printf("Digitare quantità di numeri da analizzare: ");  //si può fare con do-while
    //scanf("%d", &n);
    int* v = (int*)malloc(1*sizeof(int));
    do{
        v[i]=tmp;
        i++;
        n++;
        if(i+1>n/2)
            v = (int*)realloc(v,n*2*sizeof(int));
        printf("Inserire numero (digitare  0 per terminare la lettura): ");
        scanf("%d",&tmp);
    }while(tmp!=0);
    s1.v=v; s2.v=v; s3.v=v;
    s1.n=n; s2.n=n; s3.n=n;
    pthread_t tid[3];
    pthread_create(&tid[1], NULL, massimo, &s1);
    pthread_create(&tid[2], NULL, minimo, &s2);
    pthread_create(&tid[3], NULL, media, &s3);
    pthread_join(tid[1], NULL);
    pthread_join(tid[2], NULL);
    pthread_join(tid[3], NULL);
    printf("Massimo: %f\nMinimo: %f\nMedia: %f\n",s1.res,s2.res,s3.res);
    free(v);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define N 100
int leggi_numeri(int fd, int* r){
    int conta=0,receive;
    do{
        receive =(int) read(fd, r+conta/sizeof(int), 5*sizeof(int));
        if(receive<0){
            printf("Errore in lettura");
            return 1;
        }
        if(receive<sizeof(int))
            printf("Messaggio incompleto");
        conta=conta+receive;
    }while(conta!=5*sizeof(int));
    return conta;
}
int main(int argc, char* argv[]) {
 int fd[2], i, v[5];
 pid_t pid;
 int retval=pipe(fd);
 if(retval!=0){
    printf("Errore nella creazione della pipe");
    return 1;
 }  
 pid=fork();
 if(pid<0){
     printf("Errore della fork");
     return 1;
 }
 if(pid==0){
    close (fd[0]);
    for(i=0; i<5; i++){
        printf("Inserire numero: ");
        scanf("%d", v+i);
    }
    int sent = write(fd[1],v, 2*sizeof(int));
    if(sent!=2*sizeof(int))
        printf("Errore nell'invio");
    sleep(1);
    sent = write(fd[1],v+2, 3*sizeof(int));
    if(sent!=3*sizeof(int))
        printf("Errore nell'invio");
    close(fd[1]);
    return 0;
 }
 if(pid>0){
     close(fd[1]);
     int v[5];
     int ricevuti= leggi_numeri(fd[0],v);
     if(ricevuti<5)
        printf("Ricezione parziale");
     else
        for(i=0; i<5; i++)
            printf("%d", v[i]);
    close(fd[0]);
    return 0;
 }
 
}
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main()
{
pid_t pid1,pid2;
pid1 = fork();
pid2=fork();
if (pid2 == 0) { /* processo figlio */
printf("PID fork figlio2: %d  PID proprio: %d\n",pid2,getpid());
}
else if (pid2 > 0) { /* processo padre */
wait(NULL);
printf("PID fork padre2: %d  PID proprio: %d\n",pid2,getpid());
exit(0);
}
if (pid1 == 0) { /* processo figlio */
printf("PID fork figlio1: %d  PID proprio: %d\n",pid1,getpid());
}
else if (pid1 > 0) { /* processo padre */
wait(NULL);
printf("PID fork padre1: %d  PID proprio: %d\n",pid1,getpid());
exit(0);
}
return 0;
}
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main()
{
pid_t pid1,pid2;
pid1 = fork();
if (pid1 == 0) { /* processo figlio */
printf("PID fork figlio1: %d  PID proprio: %d\n",pid1,getpid());
pid2= fork();
if (pid2 == 0) { /* processo figlio */
printf("PID fork figlio2: %d  PID proprio: %d\n",pid2,getpid());
}
else if (pid2 > 0) { /* processo padre */
wait(NULL);
printf("PID fork padre2: %d  PID proprio: %d\n",pid2,getpid());
exit(0);
}
}
else if (pid1 > 0) { /* processo padre */
wait(NULL);
printf("PID fork padre1: %d  PID proprio: %d\n",pid1,getpid());
exit(0);
}
return 0;
}
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
int main(int argc, char* argv[])
{
pid_t pid1;
char s1[]="/bin/";
pid1=fork();
if (pid1 == 0) { /* processo figlio */
strcat(s1,argv[1]);
execlp(s1, argv[1], NULL);
}
else if (pid1 > 0) { /* processo padre */
wait(NULL);
printf("Comando eseguito!");
exit(0);
}
return 0;
}
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>

#define N 100
int main(int argc, char* argv[]) {
    int fd[2], i, n;
    char message[N];
    struct timeval begin, end;
    gettimeofday(&begin, NULL);
    printf("%ld", begin.tv_usec);
    if(argc < 2){
      printf("Nome non inserito!");
      return 0;
    }

    if (pipe(fd) < 0) {
        printf("Pipe creation error\n");
        return 1;
    }
    pid_t pid = fork();
    if (pid<0) {
        printf("fork error\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        close(fd[1]); // Close write pipe
        int received = (int)read(fd[0], message, sizeof(message));
        if (received < 0) {
            printf("Receiving error!\n");
        } else {
            if (received < sizeof(argv[1]))
                printf("Message incomplete!\n");
            char c[]="/bin/";
            strcat(c,message); 
            execlp(c,argv[1],NULL);     
        }
        close(fd[0]);
        return 0;
    } else {
        // Father process
        close(fd[0]); // Close read pipe
        // Compose message
        
        int sent = (int)write(fd[1], argv[1], sizeof(argv[1]));
        if (sent != sizeof(argv[1])) {
            printf("Sending error!\n");
            return 1;
        }
        gettimeofday(&end, NULL);
        double durata = (end.tv_sec - begin.tv_sec) + ((end.tv_usec - begin.tv_usec) / 1000000.0);
        printf("Durata esecuzione in millisecondi: %f", durata);
        close(fd[1]);
        return 0;
    }
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/stat.h>

void ordina(float*v, int n){
    int i,k;    //è l'algoritmo di bubble sort!!!
    bool modified;
    modified = true;
    for(k=0; k<n-1 && modified; k++){
        modified=false;
        for(i=0; i<n-k-1; i++){
            if(v[i]>v[i+1]){
                float tmp=v[i];
                v[i]=v[i+1];
                v[i+1]=tmp;
                modified=true;
            }
        }
    }
}

int main(int argc, char* argv[]){
    int i;
    int n=atoi(argv[1]);
    int segment_id=shmget(IPC_PRIVATE, n*sizeof(float), S_IRUSR | S_IWUSR);
    if(segment_id==-1){
        printf("Errore nella creazione dell'area di mem condivisa");
        shmctl(segment_id, IPC_RMID, NULL);
        return 1;
    }
    pid_t pid = fork();
    if(pid<0){
        printf("Errore fork");
        shmctl(segment_id, IPC_RMID, NULL);
        return 1;
    }
    if(pid==0){
        float* v = (float*)shmat(segment_id, NULL, 0);
        for(i=0; i<n; i++){
            printf("Inserire il %do numero: ",i+1);
            scanf("%f",v+i);
        }
        ordina(v,n);
        shmdt(v);
    }
    if(pid>0){
        wait(NULL);
        int i;
        float* vet = (float*)shmat(segment_id, NULL, 0);
        for(i=0; i<n; i++){
            printf("%f ",vet[i]);
        }
        shmdt(vet);
        shmctl(segment_id, IPC_RMID, NULL);
    }
    return 0;
}

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/stat.h>

int main(int argc, char* argv[]) {
    struct timeval end;
    //gettimeofday(&begin, NULL);
    int segment_id=shmget(IPC_PRIVATE, sizeof(struct timeval), S_IRUSR | S_IWUSR);
    if (segment_id<0) {
        printf("shmget error\n");
        return 1;
    }

    pid_t pid=fork();
    if (pid<0) {
        fprintf(stderr, "fork error\n");
        // Important! Shared Memory deallocation
        shmctl(segment_id, IPC_RMID, NULL);
        return 1;
    } else if (pid==0) {
        char c[]="/bin/";
        struct timeval *p=(struct timeval *)shmat(segment_id, NULL, 0);
        gettimeofday(p, NULL);
        strcat(c,argv[1]);
        execlp(c,argv[1],NULL);
        
        // Detach shared memory
        shmdt(p);
        return 0;
    } else {
        wait(NULL);
        // Attach shared memory
        struct timeval *v = (struct timeval *)shmat(segment_id, NULL, 0);
        //gettimeofday(&end, NULL);
        gettimeofday(&end, NULL);
        double durata = (end.tv_sec - v->tv_sec) + ((end.tv_usec - v->tv_usec) / 1000000.0);
        printf("Durata esecuzione in millisecondi: %f", durata);
        // Detach shared memory
        shmdt(v);
        // Important! Shared Memory deallocation
        shmctl(segment_id, IPC_RMID, NULL);
        return 0;
    }
}

